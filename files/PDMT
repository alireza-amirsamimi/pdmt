#!/bin/bash
#Persepolis Download Manager Terminal (PDMT) written by AliReza AmirSamimi(alireza.amirsamimi@ubuntu.ir) and It is based on aria2
#files : s means   s$pdm_num.txt,p means   p$pdm_num.txt & ...  
#s=download status r=aria ready p=aria2c pid e=end status d=downloaded f=fail_counter l=download_link qf=queue failed links
#aria2 status : 0=aria ready 1=aria not ready
#dowload manager status(download_flag) : 0=completed 1=paused 2=failed 3=download 4=reconnecting
#end_status(end time that defined by user with e switch) 0=not end yet 1=time is up 2=download completed or canceled or...

#functions
#finish & finish2 atrl_c are functions.they are delete text files that created by PDMT after exit!in other word it's for clearance!
finish (){
rm -v $temp_path/"p$pdm_num".txt >/dev/null 2>&1
rm -v $temp_path/"r$pdm_num".txt >/dev/null 2>&1
rm -v $temp_path/"s$pdm_num".txt >/dev/null 2>&1
rm -v $temp_path/"$pdm_num".txt  >/dev/null 2>&1
rm -v $temp_path/"e$pdm_num".txt >/dev/null 2>&1
rm -v $temp_path/"d$pdm_num".txt >/dev/null 2>&1
rm -v $temp_path_2/aria_ready_file >/dev/null 2>&1
rm -v $temp_path/"f$pdm_num".txt >/dev/null 2>&1
rm -v $temp_path/"l$pdm_num".txt >/dev/null 2>&1
rm -v $temp_path/"qf$pdm_num".txt >/dev/null 2>&1
rm -v $temp_path/"youtube$pdm_num".txt >/dev/null 2>&1
rm -v $temp_path/"youtubeq$pdm_num".txt >/dev/null 2>&1
rm -v $temp_path/"fnameq$pdm_num".txt >/dev/null 2>&1
rm -v $temp_path/"fnameqf$pdm_num".txt >/dev/null 2>&1
echo -e "$text_color0 EXIT!"
echo -e "$normal_color   "
#makes cursor visible & change color of texts in terminal to normal after exit.
tput cnorm   -- normal
tput smam
}
finish2 () {
aria_ready=$(cat $temp_path/"r$pdm_num".txt 2>/dev/null)
if [ "$aria_ready" != "0" ]
	then
	    kill $$
	else
	    clear
	    logo
	    if [ "$my_file" = "" ]
     		then
         		echo " Download Canceled by user!Please Wait..."
         		echo -e "$text_color PDMT will resume download if you start download this file again.    "
         		echo -e " You can find summary & history of downloads & download links in \n $download_folder/report "
         		echo  "#################"|cat >> $download_folder/report
         		date|cat >> $download_folder/report
         		echo "$download_link"|cat >> $download_folder/report
         		echo "Download Canceled by user!"|cat >> $download_folder/report
         		cat $temp_path/"d$pdm_num".txt >> $download_folder/report 2> /dev/null
         		echo "#################"|cat >> $download_folder/report
     		else
     		        download_link=$(cat $temp_path/"l$pdm_num".txt 2>/dev/null)
         		echo " Queue Canceled by user!Please Wait..."
         		echo -e "$text_color PDMT will resume download if you start download this file again.    "
         		echo -e " You can find summary & history of downloads & download links in \n $download_folder/report   "
         		echo "#################"|cat >> $download_folder/report
         		date|cat >> $download_folder/report
         		echo "$download_link"|cat >> $download_folder/report
         		echo "Queue Canceled by user!"|cat >> $download_folder/report
         		cat $temp_path/"d$pdm_num".txt >> $download_folder/report 2> /dev/null
         		echo "#################"|cat >> $download_folder/report
     	    fi

            kill $$
fi

}
ctrl_c () {
finish2
}

#youtube function uses youtube-dl program to find download link of video
youtube () {

echo -e "$text_color0 Please Wait ...!"
if [ "$ip_name" == "" ];then
	ip_port=""
   else
	ip_port="$ip_name:$port_name"
fi
#Finding diffrent qualities available for Video
youtube-dl -F --proxy "$ip_port" -u "$site_user" -p "$site_password"  $download_link 2> /dev/null > $temp_path/"youtube$pdm_num".txt
if [ "$?" != "0" ];then
	echo "Error"
	exit
fi
info_line_number_y=$(cat "$temp_path/youtube$pdm_num".txt|grep -n "Available formats"|awk -F ":" '{print $1}')
line_nambers_y=$(cat "$temp_path/youtube$pdm_num".txt | wc -l)
diffrence_line_number_y=$((line_nambers_y - info_line_number_y ))
#finding the name of video
fname=`youtube-dl --get-filename --proxy "$ip_port" -u "$site_user" -p "$site_password"  $download_link 2> /dev/null | tail -1`
if [ "$fname" == "" ];then
	fname="videoplayback"
fi
echo -e "$text_color Link : $progress_color$download_link \n$text_color File Name : $progress_color$fname  \n \n######################"
echo -e "$text_color0"
cat $temp_path/"youtube$pdm_num".txt | tail -$diffrence_line_number_y
echo -e "\n$progress_color######################"
echo -e "\n \n$text_color0 Please enter your desired$progress_color format code$text_color0 & PRESS ENTER! \n$text_color If you want the best quality , leave it empty  & JUST PRESS ENTER"
if [ "$sound_config" = "yes" ]
	then
		paplay $notifications_path/you.ogg 2> /dev/null
fi
#inputs the number of format that user selected
tput cnorm   -- normal
if [ $download_type == 1 ];then
	read  f_number
	else
	read -u 3 f_number
fi
tput civis      -- invisible
if  [ "$f_number" == "" ];then
	f_number="best"
fi
#finding download link
youtube-dl -f $f_number --get-url --proxy "$ip_port" -u "$site_user" -p "$site_password"  $download_link 2> /dev/null > $temp_path/"youtube$pdm_num".txt
if [ "$?" != "0" ];then
	echo "ERROR!"
	exit
fi
download_link=`cat "$temp_path/youtube$pdm_num".txt| tail -1`
fname=${fname// /_}

}

#this function creates log file (information about download,percent & time remaining & ...).log file is deactived by default.
log () {
((log_counter ++))
if [ "$log_counter" -gt "10" ] && [ "$log_config" = "yes" ]
   	then
   		((log_counter_link ++))
   		if [ "$log_counter_link" -eq "1" ]
   	    		then
				date|cat >> $download_folder/log
   	    			echo -e "$download_link\n$file_name_extension_prime" >> $download_folder/log
   	    	fi
   	        if [ "$log_counter_link" -gt "10" ]
   	    	    then
   	    		    log_counter_link=0
   	        fi
   	        echo "$progress_title" >> $download_folder/log
   	        log_counter=0

fi
}

#this function gets the file extension from output of aria and defines the output path after download.
#Files are downloaded in ~/.persepolis folder and after download finished , PDMT moves them to download folder(defined by user) according to file extension.  
#files will be moved to Videos Audios Documents Compressed & Others sub-folder in Download folder
file_extension (){
file_name_extension="${save_as_temp##*/}"
extension="${file_name_extension##*.}"
case "$extension" in
	act|aiff|aac|amr|ape|au|awb|dct|dss|dvf|flac|gsm|iklax|ivs|m4a|m4p|mmf|mp3|mpc|msv|ogg|oga|opus|ra|raw|sln|tta|vox|wav|wma|wv)
        file_type="Audios"
	;;
	3g2|3gp|asf|avi|drc|flv|m4v|mkv|mng|mov|qt|mp4|m4p|mpg|mp2|mpeg|mpe|mpv|m2v|mxf|nsv|ogv|rmvb|roq|svi|vob|webm|wmv|yuv)
	file_type="Videos"
	;;
	doc|docx|html|htm|fb2|odt|sxw|pdf|ps|rtf|tex|txt)
	file_type="Documents"
	;;
        a|ar|cpio|shar|LBR|iso|lbr|mar|tar|bz2|F|gz|lz|lzma|lzo|rz|sfark|sz|xz|Z|z|infl|7z|s7z|ace|afa|alz|apk|arc|arj|b1|ba|bh|cab|cfs|cpt|dar|dd|dgc|dmg|ear|gca|ha|hki|ice|jar|kgb|lzh|lha|lzx|pac|partimg|paq6|paq7|paq8|pea|pim|pit|qda|rar|rk|sda|sea|sen|sfx|sit|sitx|sqx|tar.gz|tgz|tar.Z|tar.bz2|tbz2|tar.lzma|tlz|uc|uc0|uc2|ucn|ur2|ue2|uca|uha|war|wim|xar|xp3|yz1|zip|zipx|zoo|zpaq|zz|ecc|par|par2)
	file_type="Compressed"
	;;
	*)
	file_type="Others"
	;;
esac

if  [ "$file_name_extension" = "videoplayback" ]
	then
		file_type="Videos"
fi

suffix=0
file_name_extension_prime=$file_name_extension
while test -e "$download_folder/$file_type/$file_name_extension_prime"; do
    file_name_extension_prime="($((++suffix))).$file_name_extension"
done
if [ "$save_as_temp" != "" ]
	then
		save_as="$download_folder/$file_type/$file_name_extension_prime"
	else
		save_as=""
fi
}

#this function shutdown or suspend or hibernate system according to  the user selection
#this function uses pm-utils package and needs root password
#users can replace code with DBUS. so PDMT can shutdown & ... system without root password.
#Please see this link for more help : http://askubuntu.com/questions/454039/what-command-is-executed-when-shutdown-from-the-graphical-menu-in-14-04
#but dbus code won't work in all distros!so I use pm-utils!
func_after () {
download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
end_status=$(cat $temp_path/"e$pdm_num".txt 2> /dev/null)
if [ "" != "$end_time" ] && [ $end_status -eq 0 ]
	then
	echo "2"|cat >$temp_path/"e$pdm_num".txt
	sleep 20
fi
sleep 5
if [ "$no_password_config" = "no" ];then
	case "$do_after" in
    	2)
    	killall aria2c 2> /dev/null
    	echo $password_input |sudo -S shutdown -h now
    	;;
    	3)
    	killall aria2c 2> /dev/null
    	echo $password_input |sudo -S pm-suspend
    	;;
    	4)
    	killall aria2c 2> /dev/null
    	echo $password_input |sudo -S pm-hibernate
    	;;
	esac
	exit
else
	case "$do_after" in
    	2)
    	killall aria2c 2> /dev/null
	dbus-send --system --print-reply --dest=org.freedesktop.login1 /org/freedesktop/login1 "org.freedesktop.login1.Manager.PowerOff" boolean:true
    	;;
    	3)
    	killall aria2c 2> /dev/null
	dbus-send --system --print-reply --dest=org.freedesktop.login1 /org/freedesktop/login1 "org.freedesktop.login1.Manager.Suspend" boolean:true > /dev/null 2>&1
    	;;
    	4)
    	killall aria2c 2> /dev/null
	dbus-send --system --print-reply --dest=org.freedesktop.login1 /org/freedesktop/login1 "org.freedesktop.login1.Manager.Hibernate" boolean:true
    	;;
	esac
	exit
fi
}

#If Download failed,this function checks the internet connceton and if connection dropped,notification sound played!
#If Download failed by aria2,PDMT tries download again.The number of retries can be difined by user.
#the number of retries can be defined by user
fail_reconnecting (){
fail_counter=$(cat $temp_path/"f$pdm_num".txt 2> /dev/null)
if [ "$fail_counter" = "" ]
        then
 	    echo "0" > $temp_path/"f$pdm_num".txt
       	    fail_counter="0"
        else
     	    ((fail_counter ++ ))
	    echo "$fail_counter" > $temp_path/"f$pdm_num".txt

fi
if [ "$fail_counter" = "$retryf_config" ]
	then
	    echo "2"> $temp_path/"s$pdm_num".txt
	else
	    ifail="0"
            echo " Download Failed!reconnecting... .be patient!"
	    echo "#################"|cat >> $download_folder/report
     	    date|cat >> $download_folder/report
     	    echo "$download_link"|cat >> $download_folder/report
	    echo "Download Failed!" | cat >> $download_folder/report
   	    cat $temp_path/"d$pdm_num".txt >> $download_folder/report 2> /dev/null
	    echo "#################"|cat >> $download_folder/report
#checking the internet connection by ping www.google.com
	    until ping -c 1 -w 5 www.google.com >/dev/null 2>&1 || [ "$ifail" = "$retryd_config" ]
		do
		    clear
		    logo
		    echo -e "$text_color Check your internet connection!! \n$progress_color PDMT will retry after $delay_config seconds"
		    if [ "$sound_config" = "yes" ]
			  then
	     			 paplay $notifications_path/connection.ogg 2> /dev/null
     		    fi
		    echo "#################"|cat >> $download_folder/report
     		    date|cat >> $download_folder/report
     		    echo "$download_link"|cat >> $download_folder/report
     		    echo "Internet connection droped!Check your internet connection!" >> $download_folder/report
		    cat $temp_path/"d$pdm_num".txt >> $download_folder/report 2> /dev/null
     		    echo "#################"|cat >> $download_folder/report
		    delay_config_counter=$delay_config
		    while [ "$delay_config_counter" != "0" ];do
			tput cup 12 0
       			sleep 1
       			((delay_config_counter --))
			echo " PDMT will retry after $delay_config_counter s      "
		    done
		    ((ifail ++))
	    done
	    sleep 10
	    end_status=$(cat $temp_path/"e$pdm_num".txt 2> /dev/null)
	    if [ "$end_status" != "1" ]
     		then
	    	    echo "4"> $temp_path/"s$pdm_num".txt
	        else
	            echo "2"> $temp_path/"s$pdm_num".txt
	    fi
fi
}
#this function uses wget to find size of file and sets aria2 according to the file size.
download () {
progress_dialog &
size_remote=$(wget --spider -O "$temp_path/salam"  --no-check-certificate -T 5 -t 3 -e use-proxy=yes --proxy-user="$user_name" --proxy-password="$password_name" -e --http-proxy="$ip_port" --user="$site_user" --password="$site_password" "$download_link" 2>&1 | awk '/Length/ { print $2 }')
if [ "$size_remote" = "" ]
   then
       size_remote="0"
fi
size_remote=$((size_remote / 1048576))
case $size_m in
[2-9]|1[0-5])
x_para=$size_m
;;
*)
x_para=16
;;
esac

if [ $x_para -gt $max_num_connections ]
   then
       x_parameter=$max_num_connections
   else
       x_parameter=$x_para
fi

echo "$download_link"|grep -e "ftp://"
if [ "$?" -eq "0" ]
   then
     site_user_http=""
     site_password_http=""
     site_user_ftp="$site_user"
     site_password_ftp="$site_password"
   else
     site_user_http="$site_user"
     site_password_http="$site_password"
     site_user_ftp=""
     site_password_ftp=""
fi

aria2c --on-download-start="$temp_path_2/aria_ready_file"  --all-proxy=$ip_port --summary-interval=1 --all-proxy-passwd=$password_name --all-proxy-user=$user_name --http-user=$site_user_http --http-passwd=$site_password_http --ftp-user=$site_user_ftp --ftp-passwd=$site_password_ftp -s 16 -x $x_parameter -k 1M -c -d $download_folder_temp $aria2_options "$download_link" 2>&1 | cat > $temp_path/"$pdm_num".txt
echo "1" |cat > $temp_path/"r$pdm_num".txt
aria_status=$(cat $temp_path/"$pdm_num".txt|tail -50|egrep -a "download completed|download in-progress" )
end_status=$(cat $temp_path/"e$pdm_num".txt 2> /dev/null)
#PDMT checks end status and then checks output of aria2 and defines that download completed or failed or canceled.
if [ "$end_status" != "1" ]
     then
	case $aria_status in
		"(OK):download completed.")
		echo "0"> $temp_path/"s$pdm_num".txt
		echo " Please wait..."
		;;
		"(INPR):download in-progress.")
		download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
                ;;
		*)
		download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
		if [ "$download_flag" = "4" ] || [ "$download_flag" = "3" ]
  		  then
  		        fail_reconnecting
		fi
		;;
        esac
    else
     	echo "1"> $temp_path/"s$pdm_num".txt
fi


}

#a simple progress bar
progress_bar() {
tput cup 12 0
echo -e "$progress_color  "
echo -n "["
percent20=$((download_percent / 20))
case "$percent20" in
     0)
     echo -n "<-"
     ;;
     1)
      echo -n "<-||||||||||"
     ;;
     2)
      echo -n "<-||||||||||||||||||||"
     ;;
     3)
      echo -n "<-||||||||||||||||||||||||||||||"
     ;;
     4)
      echo -n "<-||||||||||||||||||||||||||||||||||||||||"
     ;;
     5)
      echo -n "<-||||||||||||||||||||||||||||||||||||||||||||||||||"
     ;;
esac
percent_res=$((download_percent-20*percent20))
percent_res2=$((percent_res / 2))
case "$percent_res2" in
     0)
     echo -n "->"
     ;;
     1)
      echo -n "|->"
     ;;
     2)
      echo -n "||->"
     ;;
     3)
      echo -n "|||->"
     ;;
     4)
      echo -n "||||->"
     ;;
     5)
      echo -n "|||||->"
     ;;
     6)
      echo -n "||||||->"
     ;;
     7)
      echo -n "|||||||->"
     ;;
     8)
      echo -n "||||||||->"
     ;;
     9)
      echo -n "|||||||||->"
     ;;
esac
percent_res4=$((download_percent / 2))
percent_res5=$((49 - percent_res4))

for ii in `seq 0 $percent_res5`;
	do
          echo -n "-"
done
echo "]"

}

#this function checks the output of aria2 and shows gownload informations(Percent & time remaining & ...)
progress_dialog () {
aria_ready=$(cat $temp_path/"r$pdm_num".txt 2> /dev/null)
download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
clear
logo
echo -e "$text_color0 Download Starting Now!"
while [ "$aria_ready" != "0" ] && [ "$download_flag" = "3" ]
        do
	  aria_ready=$(cat $temp_path/"r$pdm_num".txt 2> /dev/null)
	  download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
	  sleep 0.5
done
clear
aria_ready=$(cat $temp_path/"r$pdm_num".txt 2> /dev/null)
download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
while [  "$aria_ready" = "0" ] && [ "$download_flag" = "3" ]
   do
   tput cup 0 0
   logo
   save_as_temp=$(cat $temp_path/"$pdm_num".txt 2> /dev/null|tail -50|awk '/FILE:/ {print $0 }'|tail -1|awk '/FILE/ {print $0 }'|awk '/\/home/ {print $0 }')
   progress_title=$(cat $temp_path/"$pdm_num".txt 2> /dev/null|tail -50|awk '/CN/ {print $0 }'|tail -1)
   download_percent=$(echo "$progress_title"| awk -F/ '{ print $2 }' | awk -F"(" '{ print $2 }' | awk -F")" '{ print $1 }'|awk -F"%" '{ print $1 }')
   progress_title_percent=$(echo "$progress_title" | awk '{ print $2 }')
   progress_title_connections=$(echo "$progress_title" | awk '{ print $3 }'| awk -F ":" '{ print $2 }')
   progress_title_rate=$(echo "$progress_title" | awk '{ print $4 }'| awk -F ":" '{ print $2 }')
   progress_title_estimate=$(echo "$progress_title" | awk '{ print $5 }'| awk -F ":" '{ print $2 }'| awk -F "]" '{ print $1 }')
   file_extension
   echo -e "$text_color Link : $progress_color$download_link   "
   echo -e "$text_color Save as : $progress_color$save_as   "
   echo -e "$text_color Downloaded : $progress_color$progress_title_percent    "
   echo -e "$progress_title_percent Downloaded " > $temp_path/"d$pdm_num".txt
   echo -e "$text_color Transfer rate : $progress_color$progress_title_rate    "
   echo -e "$text_color Estimate time left : $progress_color$progress_title_estimate    "
   echo -e "$text_color Number of connections : $progress_color$progress_title_connections     "
   progress_bar
   echo -e "$text_color0 \n \n Press CTRL+C for STOP downloading   "
   line_number1=`tput lines`
   cols_number1=`tput cols`
   sleep 2.2
   line_number2=`tput lines`
   cols_number2=`tput cols`
   if [ "$line_number1" -ne "$line_number2" ] || [ "$cols_number1" -ne "$cols_number2" ]
        then
            clear
   fi
   log
   download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
   aria_ready=$(cat $temp_path/"r$pdm_num".txt 2> /dev/null)
done
clear the screen
logo
echo -e "$text_color0  "
}

#this function writes summary of download in the report file and informs user & moves the file to the download folder if download completed 
stop (){
download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
case $download_flag in
     0)
     save_as_temp=$(cat $temp_path/"$pdm_num".txt 2> /dev/null|tail -50|awk '/Download complete: / {print $0 }'|awk '/\/home/ {print $0 }')
     file_extension
     save_as_temp="$download_folder_temp/$file_name_extension"
     mv -n "$save_as_temp" "$save_as"
     echo -e " The file Saved as :"
     echo -e "$text_color $save_as \n"
		 echo -e "$text_color0 Download Complete!Please Wait..."
     if [ "$my_file" = "" ]
     	then
     	    if [ "$open_config" = "yes" ]
		  then
	     	      xdg-open $download_folder/$file_type >/dev/null 2>&1
     	    fi
     fi
     if [ "$sound_config" = "yes" ]
	  then
	      paplay $notifications_path/ok.ogg 2> /dev/null
     fi
     echo "#################"|cat >> $download_folder/report
     date|cat >> $download_folder/report
     echo "$download_link"|cat >> $download_folder/report
     echo "download complete!"|cat >> $download_folder/report
     echo "$save_as"|cat >> $download_folder/report
     echo "#################"|cat >> $download_folder/report
     ;;
     1)
     if [ "$my_file" = "" ]
        then
     		echo " Download Paused!Please Wait..."
	        echo -e "$text_color PDMT will resume download if you start download this file again.    "
                echo -e " You can find summary & history of downloads & download links in \n $download_folder/report "
     		echo "#################"|cat >> $download_folder/report
     		date|cat >> $download_folder/report
     		echo "$download_link"|cat >> $download_folder/report
     		echo "download paused!"|cat >> $download_folder/report
     		cat $temp_path/"d$pdm_num".txt >> $download_folder/report 2> /dev/null
     		echo "#################"|cat >> $download_folder/report
        else
                echo " Queue Paused"
                echo -e "$text_color PDMT will resume download if you start download this file again.    "
                echo -e " You can find summary & history of downloads & download links in \n $download_folder/report "
	        echo "#################"|cat >> $download_folder/report
                date|cat >> $download_folder/report
                echo "$download_link"|cat >> $download_folder/report
                echo "Queue Paused"|cat >> $download_folder/report
                cat $temp_path/"d$pdm_num".txt >> $download_folder/report 2> /dev/null
                echo "#################"|cat >> $download_folder/report
     fi
     ;;

     2)
     echo " Download Failed!Please Wait..."
     echo -e "$text_color PDMT will resume download if you start download this file again.    "
     echo -e " You can find summary & history of downloads & download links in \n $download_folder/report "
     if [ "$sound_config" = "yes" ]
	  then
	      paplay $notifications_path/fail.ogg 2> /dev/null
     fi
     echo "#################"|cat >> $download_folder/report
     date|cat >> $download_folder/report
     echo "$download_link"|cat >> $download_folder/report
     echo "download Failed!"|cat >> $download_folder/report
     cat $temp_path/"d$pdm_num".txt >> $download_folder/report 2> /dev/null
     echo "#################"|cat >> $download_folder/report
     ;;


esac

}
#download single link.
#dowload manager status(download_flag) : 0=completed 1=paused 2=failed 3=download 4=reconnecting
#aria2 status : 0=aria ready 1=aria not ready
download_single () {
echo "#################"|cat >> $download_folder/report
date|cat >> $download_folder/report
echo "$download_link"|cat >> $download_folder/report
echo "Download starting now!"|cat >> $download_folder/report
echo "#################"|cat >> $download_folder/report
download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
while [ "$download_flag" != "0" ] && [ "$download_flag" != "2" ] && [ "$download_flag" != "1" ]
	do

	while [ "$download_flag" = "3" ]
		do
		download
		download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
	done

	while [ "$download_flag" = "4" ]
		do
		clear
		logo
		echo " Reconnecting... .be patient"
		echo "#################"|cat >> $download_folder/report
                date|cat >> $download_folder/report
                echo "$download_link"|cat >> $download_folder/report
                echo "Reconnecting"|cat >> $download_folder/report
                echo "#################"|cat >> $download_folder/report
		sleep_counter=20
		while [ "$sleep_counter" != "0" ];do
			tput cup 12 0
       			sleep 1
       			((sleep_counter --))
			echo " PDMT will retry after $sleep_counter s      "
		done		
		while [ "$aria_ready" != "1" ]
		      do
		      aria_ready=$(cat $temp_path/"r$pdm_num".txt 2> /dev/null)
		      sleep 5
		done
		download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
		if   [ "$download_flag" = "4" ]
		     then
			echo "3"> $temp_path/"s$pdm_num".txt
                fi
                download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
	done
done
stop
}

#download_queue uses download_single function to download multiple links
#this function stores failed links in a file(qf$pdm_num.txt) for retrying.
# "fnameq$pdm_num".txt is for saving the name of video files that youtube function creates 
download_queue () {
for iq in `seq 1 $queue_config`
      do
	qi=1
	while read -r line
		do
		download_link=$line
		echo "$download_link" > $temp_path/"l$pdm_num".txt
		download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
		if [ "$download_link" = "" ] || [ "$download_flag" = "1" ]
		   then
		       break
		fi
		echo "3"> $temp_path/"s$pdm_num".txt
		echo "0"> $temp_path/"f$pdm_num".txt
		if [ -f $temp_path/"fnameq$pdm_num".txt ];then
			fname=`sed "$qi q;d" $temp_path/"fnameq$pdm_num".txt`
			aria2_options="$aria2_options --out=$fname"
		fi
		download_single
		if [ "$download_flag" = "2" ]
			then
			    if [ "$qi" = "1" ]
			    	then
			    	    echo "$download_link" > $temp_path/"qf$pdm_num".txt 2> /dev/null
				    if [ -f $temp_path/"fnameq$pdm_num".txt ];then
					    	echo "$fname" > $temp_path/"fnameqf$pdm_num".txt
				    fi
			    	else
			    	    echo "$download_link" >> $temp_path/"qf$pdm_num".txt 2> /dev/null
				    if [ -f $temp_path/"fnameq$pdm_num".txt ];then
					    	echo "$fname" > $temp_path/"fnameqf$pdm_num".txt
				    fi
			    fi
		fi
		sleep 1
		((qi++))
	done < "$my_file"
	if [ ! $(cat $temp_path/"qf$pdm_num".txt 2> /dev/null) ]
	  	then
	  	    break
	fi
	if [ -f $temp_path/"fnameq$pdm_num".txt ];then
		cat $temp_path/"fnameqf$pdm_num".txt > $temp_path/"fnameq$pdm_num".txt
	fi
	my_file=$temp_path/"qf$pdm_num".txt
	sleep 5
done
download_flag=$(cat $temp_path/"s$pdm_num".txt 2> /dev/null)
if [ "$download_flag" != "1" ]
  	then
  	    echo " Queue Complete"
  	    if [ "$open_config" = "yes" ]
		  then
			 xdg-open $download_folder >/dev/null 2>&1
     	    fi
	    if [ "$sound_config" = "yes" ]
	         then
	             paplay $notifications_path/queue.ogg 2> /dev/null
            fi
	    echo "#################"|cat >> $download_folder/report
	    date|cat >> $download_folder/report
            echo "Queue Complete"|cat >> $download_folder/report
            echo "#################"|cat >> $download_folder/report

fi

}

#this function defines type of download.
download_process () {
case "$download_type" in
      1)
	download_single
        ;;
      2)
	download_queue
	;;

esac
func_after
}

#logo of pdmt
logo () {
echo -e "$logo_color#########################################     "
echo "#########################################     "
echo "# Persepolis Download Manager Terminal  #     "
echo "############  (PDMT)  ###################     "
echo "#########################################     "
echo "                                              "
}

#User can change setting by this function(pdmt -c).
config ()
{
tput cnorm   -- normal
echo "PDMT Configuration"
echo "if you don't want any changes, leave the questions empty and press enter!"
echo -e "$progress_color\nDo you want colorful output?(yes/no)"
read color_input
echo "The log file contains summary of download progress & updated every 22 seconds."
echo "Do you want log file(yes/no)"
read log_input
echo "Do you want notification sound?(yes/no)"
read sound_input
echo "do you want to open containing folder after download has been finished?"
read open_input
echo "Please enter download directory?(for example ~/Downloads)"
read download_folder_input
if [ "$download_folder_input" = "" ]
	then
    	    download_folder_input="$download_folder_config"
fi
first_char_input=`echo "${download_folder_input:0:2}"`
if [ "$first_char_input" = "~/" ]
        then
            remove_char_folder_input=`echo "${download_folder_input#*~}"`
            download_folder_input="$user$remove_char_folder_input"
fi

if [ ! -d "$download_folder_input" ]
        then
            echo " Directory not exist! : $download_folder_input"
	    echo " Do you want create this folder?(yes/no)"
	    read create_folder_input
	    if [ "$create_folder_input" = "yes" ] || [ "$create_folder_input" = "y" ]
		then
			mkdir $download_folder_input >/dev/null 2>&1
		else
            		download_folder_input=$download_folder
            		echo " Download file will save as $download_folder"
fi          fi
echo "Please enter number of retries if download failed"
read retryf_input
echo "Please enter number of retries if internet connection droped "
read retryd_input
echo "Please enter delay(in second) between retries if connection droped "
read delay_input
echo -e "Failed links in queue rechecked by PDMT\nand PDMT tries to download them again!\nPlease enter number of rechecking time!"
read queue_input
echo "Do you want shutdown or suspend or hibernate system after download with out asking root password?"
echo "This ability won't work in all distributions!"
read no_password_input
case "$no_password_input" in
	"")
	no_password="$no_password_config";;
	"n"|"no")
	no_password_config="no";;
	"y"|"yes")
	echo "PDMT will test your system!Your system will be suspended after 10 seconds!"
	for pass_counter in {10..1};do
		tput cup 35 0
		echo "$pass_counter   "
		sleep 1
	done
	dbus-send --system --print-reply --dest=org.freedesktop.login1 /org/freedesktop/login1 "org.freedesktop.login1.Manager.Suspend" boolean:true > /dev/null 2>&1
	if [ "$?" = "0" ];then
		echo "Your system suspended successfully !"
		no_password_config="yes"
	else
		echo "Test was unsuccessfull !your system needs root password for shutdown & ..."
		no_password_config="no"
	fi
	;;
esac
echo "Do you want restore default(yes/no)"
read default_input
if [ "$default_input" = "yes" ] || [ "$default_input" = "y" ]
	then
#default setting.
 	        echo -e "PDMT config file\ncolor=yes\nsound=yes\nopen=yes\nfolder=~/Downloads/Persepolis\nretryf=5\nretryd=5\ndelay=60\nqueue=2\nlog=no\nnopassword=no" > ~/.persepolis_download_manager_terminal/config
	else
		if [ "$color_input" = "" ]
			then
			    color_input="$color_config"
			elif [ "$color_input" = "y" ]
				then
				    color_input="yes"
			elif [ "$color_input" = "n" ]
				then
				    color_input="no"
	        fi
	        if [ "$log_input" = "" ]
			then
			    log_input="$log_config"
			elif [ "$log_input" = "y" ]
				then
				    log_input="yes"
			elif [ "$log_input" = "n" ]
				then
				    log_input="no"
	        fi
		if [ "$sound_input" = "" ]
			then
			    sound_input="$sound_config"
			elif [ "$sound_input" = "y" ]
				then
				    sound_input="yes"
			elif [ "$sound_input" = "n" ]
				then
				    sound_input="no"
		fi

		if [ "$open_input" = "" ]
			then
			    open_input="$open_config"
			elif [ "$open_input" = "y" ]
				then
				    open_input="yes"
			elif [ "$open_input" = "n" ]
				then
				    open_input="no"
		fi

		if [ "$retryd_input" = "" ]
			then
			    retryd_input="$retryd_config"
		fi
		retryd_input_test=$((retryd_input + 1))
		if [ "$retryd_input_test" = "1" ] && [ "$retryd_input" != "1" ]
			then
			    retryd_input="10"
		fi

		if [ "$retryf_input" = "" ]
			then
			    retryf_input="$retryf_config"
		fi
		retryf_input_test=$((retryf_input + 1))
		if [ "$retryf_input_test" = "1" ] && [ "$retryf_input" != "1" ]
			then
			    retryf_input="10"
		fi

		if [ "$delay_input" = "" ]
			then
			    delay_input="$delay_config"
		fi
		delay_input_test=$((delay_input + 1))
		if [ "$delay_input_test" = "1" ] && [ "$delay_input" != "1" ]
			then
			    delay_input="60"
		fi

		if [ "$queue_input" = "" ]
			then
			    queue_input="$queue_config"
		fi
		queue_input_test=$((queue_input + 1))
		if [ "$queue_input_test" = "1" ] && [ "$queue_input" != "1" ]
			then
			    queue_input="5"
		fi

 	        echo -e "PDMT config file\ncolor=$color_input\nsound=$sound_input\nopen=$open_input\nfolder=$download_folder_input\nretryf=$retryf_input\nretryd=$retryd_input\ndelay=$delay_input\nqueue=$queue_input\nlog=$log_input\nnopassword=$no_password_config" > ~/.persepolis_download_manager_terminal/config
fi
}

#initialization
#make cursor invisible
clear screen
tput civis      -- invisible
tput rmam
#trap finish function and CTRL+C keys for canceling download progress and clearance(see the finish function!).
trap finish exit
trap ctrl_c 2
if [ ! -f ~/.persepolis_download_manager_terminal/config ]
	then
		echo -e "PDMT config file\ncolor=yes\nsound=yes\nopen=yes\nfolder=~/Downloads/Persepolis\nretryf=5\nretryd=5\ndelay=60\nqueue=2\nlog=no\nnopassword=no" > ~/.persepolis_download_manager_terminal/config
fi
#PDMT imports user configs.
color_config=$(cat ~/.persepolis_download_manager_terminal/config 2> /dev/null|awk '/color/ {print $0 }'|awk -F "=" '{print $2}')
sound_config=$(cat ~/.persepolis_download_manager_terminal/config 2> /dev/null|awk '/sound/ {print $0 }'|awk -F "=" '{print $2}')
download_folder_config=$(cat ~/.persepolis_download_manager_terminal/config 2> /dev/null|awk '/folder/ {print $0 }'|awk -F "=" '{print $2}')
retryf_config=$(cat ~/.persepolis_download_manager_terminal/config 2> /dev/null|awk '/retryf/ {print $0 }'|awk -F "=" '{print $2}')
retryd_config=$(cat ~/.persepolis_download_manager_terminal/config 2> /dev/null|awk '/retryd/ {print $0 }'|awk -F "=" '{print $2}')
delay_config=$(cat ~/.persepolis_download_manager_terminal/config 2> /dev/null|awk '/delay/ {print $0 }'|awk -F "=" '{print $2}')
open_config=$(cat ~/.persepolis_download_manager_terminal/config 2> /dev/null|awk '/open/ {print $0 }'|awk -F "=" '{print $2}')
queue_config=$(cat ~/.persepolis_download_manager_terminal/config 2> /dev/null|awk '/queue/ {print $0 }'|awk -F "=" '{print $2}')
log_config=$(cat ~/.persepolis_download_manager_terminal/config 2> /dev/null|awk '/log/ {print $0 }'|awk -F "=" '{print $2}')
no_password_config=$(cat ~/.persepolis_download_manager_terminal/config 2> /dev/null|awk '/nopassword/ {print $0 }'|awk -F "=" '{print $2}')
#PDMT defines colors
normal_color="\E[33;00m"
if [ "$color_config" = "yes" ]
    then
        logo_color="\E[36;01m"
	text_color="\E[31;01m"
	text_color0="\E[33;01m"
	progress_color="\E[32;01m"
    else
        logo_color=$normal_color
	text_color=$normal_color
	text_color0=$normal_color
	progress_color=$normal_color
fi
if [ "$retryf_config" = "" ]
	then
	    retryf_config="10"
fi

logo
echo -e "$text_color0     "
input_options=$@
#PDMT difines folders path.
user=$HOME
notifications_path="$user/.persepolis_download_manager_terminal/notifications"
download_folder="$user/Downloads/Persepolis"
download_folder_temp="$user/.persepolis"
temp_path="/tmp/persepolisdm"
temp_path_2="$user/.persepolis_download_manager_terminal/temp"
mkdir $temp_path       >/dev/null 2>&1
mkdir $temp_path_2       >/dev/null 2>&1
#PDMT assigns a unic number to every call.and store it in pdm_number.txt
if [ ! -f $temp_path/pdm_number.txt ]
    then
    echo "0"> $temp_path/pdm_number.txt
    pdm_num=0
    else
    pdm_num=`cat $temp_path/pdm_number.txt`
    pdm_num=$((pdm_num + 1))
    echo "$pdm_num"> $temp_path/pdm_number.txt
fi

first_char=`echo "${download_folder_config:0:2}"`
if [ "$first_char" = "~/" ]
    then
        remove_char_folder=`echo "${download_folder_config#*~}"`
        download_folder_config="$user$remove_char_folder"
fi

if [ ! -d "$download_folder_config" ]
        then
            echo " Directory not exist! : $download_folder_config"
            echo " Download file will save as $download_folder"
            sleep 2
	else
	    download_folder=$download_folder_config
fi
mkdir $download_folder >/dev/null 2>&1
mkdir $download_folder_temp >/dev/null 2>&1
mkdir "$download_folder/Audios" >/dev/null 2>&1
mkdir "$download_folder/Videos" >/dev/null 2>&1
mkdir "$download_folder/Documents" >/dev/null 2>&1
mkdir "$download_folder/Compressed" >/dev/null 2>&1
mkdir "$download_folder/Others" >/dev/null 2>&1
tput cup 6 0
#switches
while getopts "l:i:p:u:a:j:k:s:e:m:r:o:d:w:f:hvcy" options ; do
case "${options}" in
    l)
    download_link=${OPTARG}
    ;;
    i)
    ip_name=${OPTARG}
    ;;
    p)
    port_name=${OPTARG}
    ;;
    u)
    user_name=${OPTARG}
    ;;
    a)
    password_name=${OPTARG}
    ;;
    s)
    start_time_input=${OPTARG}
    ;;
    e)
    end_time_input=${OPTARG}
    ;;
    m)
    max_num_connections=${OPTARG}
    ;;
    o)
    aria2_options_back=${OPTARG}
    aria2_options="$aria2_options $aria2_options_back"
    ;;
    d)
    do_after_download=${OPTARG}
    ;;
    w)
    password_input=${OPTARG}
    ;;
    f)
    my_file=${OPTARG}
    ;;
    j)
    site_user=${OPTARG}
    ;;
    k)
    site_password=${OPTARG}
    ;;
    h)
    cat $user/.persepolis_download_manager_terminal/help
    exit
    ;;
    y)
    youtube_switch="1"
    ;;
    v)
    cat $user/.persepolis_download_manager_terminal/about.txt
    exit
    ;;
    c)
    config
    exit
    ;;
    *)
    echo "Wrong Input!"
    exit
    ;;
esac
done


#PDMT finds link & defines download type
if [ "$my_file" != "" ]
	then

	    cat $my_file
	    if [ $? -eq 0 ]
		then
	    	    download_type=2
		else
		    echo "ERROR!!File Not Exist. Adress : $my_file "
	    	    exit
	    fi

  	else
                   download_type=1

fi
#proxy
if [ "$ip_name" != "" ] && [ "$port_name" != "" ]
       then ip_port="$ip_name:$port_name"
       else ip_port=""
fi
if [ "$user_name" != "" ] && [ "$password_name" != "" ]
          then user_pass="$user_name:$password_name"
          else user_pass=":"
fi
#start and end time
start_time_hour=$(echo "$start_time_input" | awk -F: '{ print $1 }')
start_time_minute=$(echo "$start_time_input" | awk -F: '{ print $2 }')
end_time_hour=$(echo "$end_time_input" | awk -F: '{ print $1 }')
end_time_minute=$(echo "$end_time_input" | awk -F: '{ print $2 }')
if [ "$start_time_input" != "" ]
   then
	start_time_hour_length=${#start_time_hour}
	if [ $start_time_hour_length -lt 2 ]
	then
	start_time_hour="0$start_time_hour"
	fi
	start_time_minute_length=${#start_time_minute}
	if [ $start_time_minute_length -lt 2 ]
	then
	start_time_minute="0$start_time_minute"
	fi
        start_time="$start_time_hour:$start_time_minute"
   else start_time="$start_time_hour$start_time_minute"
fi
if  [ "$end_time_input" != "" ]
    then
	end_time_hour_length=${#end_time_hour}
	if [ $end_time_hour_length -lt 2 ]
	then
	end_time_hour="0$end_time_hour"
	fi
	end_time_minute_length=${#end_time_minute}
	if [ $end_time_minute_length -lt 2 ]
	then
	end_time_minute="0$end_time_minute"
	fi
        end_time="$end_time_hour:$end_time_minute"
     else end_time="$end_time_hour$end_time_minute"
fi
#after download and input password
case "$do_after_download" in

      "shutdown")
      do_after="2"
      ;;
      "hibernate")
      do_after="3"
      ;;
      "suspend")
      do_after="4"
      ;;
      *)
      do_after="1"
      ;;
esac
#user inputs password & PDMT checkes it.
tput cnorm   -- normal
if [ $do_after -ne 1 ] && [ "$no_password_config" = "no" ]
   then
      if [ "$password_input" = "" ]
          then
              echo " Please enter root password"
              read -s password_input
      fi
	echo $password_input |sudo -S whoami  2> /dev/null
	ss=$?
	while [ $ss -ne 0 ]
              do
		echo " WRONG password!!,Please re-enter root password"

                read -s password_input
                echo $password_input |sudo -S whoami 2> /dev/null
                ss=$?
	done
fi
tput civis      -- invisible
#max number of connections
if [ "$max_num_connections" = "" ]
    then
        max_num_connections=16
fi
# if youtube_switch is 1 so user has been used y switch
# if user has been used -y switch,it means that user has been inputed a page link and PDMT must find download link (youtube function)

if [ "$youtube_switch" == "1" ];then

	if [ "$download_type" == "1" ];then
		clear
		logo		
		youtube
		aria2_options="$aria2_options --out=$fname"
		else
			while read -r line;do
				download_link="$line"
				clear
				logo				
				youtube			
				echo "$download_link" >> $temp_path/"youtubeq$pdm_num".txt
				echo "$fname" >> $temp_path/"fnameq$pdm_num".txt
			done  3<&0 < "$my_file"
			my_file="$temp_path/"youtubeq$pdm_num".txt"
	fi
fi
#main code
echo "#!/bin/bash" > $temp_path_2/aria_ready_file
echo "echo "0"|cat > $temp_path/"r$pdm_num".txt" >> $temp_path_2/aria_ready_file
echo "echo "3"|cat > $temp_path/"s$pdm_num".txt" >> $temp_path_2/aria_ready_file
echo "ps -A | grep -i aria2c | awk {'print \$1'}|tail -1|cat > $temp_path/"p$pdm_num".txt" >> $temp_path_2/aria_ready_file
chmod +x $temp_path_2/aria_ready_file
echo "3"> $temp_path/"s$pdm_num".txt
var1=`date +%H:%M`
if [ "" != "$start_time" ] && [ "$var1" != "$start_time" ]
   then

      echo -e "\n Download will be started at $start_time !"
      echo -e "$text_color \n \n Press CTRL+C for STOP downloading   "
      while [ "$var1" != "$start_time" ]
             do
		sleep 10
		var1=`date +%H:%M`
      done


      echo "#################"|cat >> $download_folder/report
      date|cat >> $download_folder/report
      echo "download process starting now"|cat >> $download_folder/report
      echo "#################"|cat >> $download_folder/report

fi
echo " Please Wait..."
(
if [ "" != "$end_time" ]
	then
	        echo "0">$temp_path/"e$pdm_num".txt
	        end_status=$(cat $temp_path/"e$pdm_num".txt 2> /dev/null)

		while [ "$var1" != "$end_time" ] && [ $end_status -ne 2 ]
		do
		sleep 10
		end_status=$(cat $temp_path/"e$pdm_num".txt 2> /dev/null)
		var1=`date +%H:%M`
		done

		if [ $end_status -ne 2 ]
		   then
		       echo "1">$temp_path/"e$pdm_num".txt
                       aria2_pid=$(cat $temp_path/"p$pdm_num".txt 2> /dev/null)
		       kill $aria2_pid 2> /dev/null
		       echo " Time is UP!"
		       echo "#################"|cat >> $download_folder/report
		       date|cat >> $download_folder/report
		       echo "Time is UP!" >> $download_folder/report
		       echo "#################"|cat >> $download_folder/report
		   else
		       exit
		fi
fi
) &
(
download_process
)
